const ms = require('ms');
const { Client, Message, MessageEmbed } = require('discord.js');
const Database = require('simplest.db');

module.exports = {
    name: "start",

    /**
     * 
     * @param {Client} client 
     * @param {Message} message 
     * @param {String[]} args 
     */
    async execute(client, message, args) {
        setTimeout(() => { if(message.deletable) message.delete() }, 500);

        if (!args[0])
            return message.reply({
                embeds: [{
                    description: "Cung c·∫•p ƒë∆°n v·ªã th·ªùi gian theo ti·∫øng Anh.\nC√°ch s·ª≠ d·ª•ng: " + client.prefix + "start <th·ªùi gian> <s·ªë ng∆∞·ªùi win> <gi·∫£i th∆∞·ªüng>",
                    color: client.config.ERR_COLOR
                }], allowedMentions: { repliedUser: false }
            }).then(msg => client.msgDelete(msg));

        if (!args[1])
            return message.reply({
                embeds: [{
                    description: "Cung c·∫•p s·ªë ng∆∞·ªùi th·∫Øng.\nC√°ch s·ª≠ d·ª•ng: " + client.prefix + "start <th·ªùi gian> <s·ªë ng∆∞·ªùi win> <gi·∫£i th∆∞·ªüng>",
                    color: client.config.ERR_COLOR
                }], allowedMentions: { repliedUser: false }
            }).then(msg => client.msgDelete(msg));

        const thoi_han = ms(args[0], { long: true });
        if (!thoi_han)
            return message.reply({
                embeds: [{
                    description: "Th·ªùi gian kh√¥ng h·ªó tr·ª£.",
                    color: client.config.ERR_COLOR
                }], allowedMentions: { repliedUser: false }
            }).then(msg => client.msgDelete(msg));

        if (isNaN(+args[1]))
            return message.reply({
                embeds: [{
                    description: "Cung c·∫•p s·ªë ng∆∞·ªùi c√≥ th·ªÉ th·∫Øng",
                    color: client.config.ERR_COLOR
                }], allowedMentions: { repliedUser: false }
            }).then(msg => client.msgDelete(msg));

        const qua_tang = args.join(" ").split(args[0] + " " + args[1] + " ")[1];

        if (!qua_tang)
            return message.reply({
                embeds: [{
                    description: "Cung c·∫•p gi·∫£i th∆∞·ªüng.",
                    color: client.config.ERR_COLOR
                }], allowedMentions: { repliedUser: false }
            }).then(msg => client.msgDelete(msg));

        client.giveawaysManager.start(message.channel, {
            duration: thoi_han,
            winnerCount: +args[1],
            prize: qua_tang,
            hostedBy: message.author.toString(),
            messages: {
                giveaway: "**GIVEAWAY** ƒë√£ b·∫Øt ƒë·∫ßu!",
                giveawayEnded: "**GIVEAWAY** ƒë√£ k·∫øt th√∫c!",
                winMessage: {
                    content: "Ch√∫c m·ª´ng, \n{winners}\n\C√°c b·∫°n ƒë√£ tr√∫ng gi·∫£i: **{this.prize}**! ƒê∆∞·ª£c t·ªï ch·ª©c b·ªüi {this.hostedBy}",
                    embed: new MessageEmbed()
                        .setDescription("[Chuy·ªÉn ƒë·∫øn tin nh·∫Øn]({this.messageURL})").setColor("303136")
                },
                dropMessage: "B·∫•m v√†o üéâ ƒë·ªÉ tham gia",
                inviteToParticipate: "B·∫•m v√†o üéâ ƒë·ªÉ tham gia",
                embedFooter: "S·∫Ω c√≥ {this.winnerCount} ng∆∞·ªùi th·∫Øng.",
                noWinner: "**Ng∆∞·ªùi th·∫Øng:** Kh√¥ng c√≥",
                winners: "**Ng∆∞·ªùi th·∫Øng:**\n",
                endedAt: "ƒê√£ quay th∆∞·ªüng {this.winnerCount} gi·∫£i",
                drawing: "K·∫øt th√∫c v√†o {timestamp}",
                hostedBy: "ƒê∆∞·ª£c t·ªï ch·ª©c b·ªüi {this.hostedBy}"
            },
        }).then((gData) => {
            const data = new Database({ path: './data/giveaway/author.json' });
            data.set(gData.messageId, message.author.id);
        });
    }
}